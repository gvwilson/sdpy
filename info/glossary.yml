# A

- key: abi
  ref:
  - api
  en:
    term: Application Binary Interface
    acronym: ABI
    def: >
      The low-level layout that a piece of software must have to work on a
      particular kind of machine.

- key: absolute_error
  en:
    term: absolute error
    def: >
      The absolute value of the difference between the observed and the correct
      value. Absolute error is usually less useful than [relative
      error](#relative_error).

- key: abstract_base_class
  en:
    term: abstract base class
    def: >
      An [abstract class](#abstract_class) from which the [class](#class)
      in question is derived.

- key: abstract_class
  ref:
  - concrete_class
  en:
    term: abstract class
    def: >
      A class that defines or requires methods it does not implement.
      An abstract class typically specifies
      the methods that [child classes](#child_class) must have
      without providing default implementations.

- key: abstract_method
  en:
    term: abstract method
    def: >
      In [object-oriented programming](#oop), a [method](#method) that is
      defined but not implemented. Programmers will define an abstract method in
      a [parent class](#parent_class) to specify operations that
      [child classes](#child_class) must provide.

- key: abstract_syntax_tree
  en:
    term: abstract syntax tree
    acronym: AST
    def: >
      A deeply nested data structure, or [tree](#tree), that represents the
      structure of a program. For example, the AST might have a [node](#node)
      representing a `while` loop with one [child](#child_tree) representing the
      loop condition and another representing the loop body.

- key: accidental_complexity
  en:
    term: accidental complexity
    def: >
      The extra difficulty added to a problem because of poor notation, poor
      tooling, an unclear problem statement, distractions, etc. The term is
      used in contrast with [intrinsic complexity](#intrinsic_complexity).

- key: accumulator
  en:
    term: accumulator
    def: >
      A variable that collects and/or combines many values.  For example, if a
      program sums the values in an array by adding them all to a variable
      called `result`, then `result` is the accumulator.

- key: actual_result
  en:
    term: actual result (of test)
    def: >
      The value generated by running code in a test. If this matches the
      [expected result](#expected_result), the test [passes](#pass_test); if the
      two are different, the test [fails](#fail_test).

- key: active_record
  en:
    term: active record
    def: >
      A [class](#class) that represents each [record](#record)
      in a database [table](#table) as one object
      whose fields automatically reflected the [fields](#field) of that table.
      Active records are one way to implement an [object-relational mapper](#orm).

- key: affordance
  en:
    term: affordance
    def: >
      An action that a thing can do:
      for example, a door can be opened or a document can be printed.
      Good user interfaces make affordances easy to discover.

- key: alias
  en:
    term: alias
    def: >
      A second or subsequent reference to the same object. Aliases are useful,
      but increase the cognitive load on readers who have to
      remember that all these names refer to the same thing.

- key: anonymous_function
  en:
    term: anonymous function
    def: >
      A function without a name. Languages like JavaScript make frequent use
      of anonymous functions; Python provides a limited form called a
      [lambda expression](#lambda_expression).

- key: ansi_encoding
  en:
    term: ANSI character encoding
    def: >
      An extension of [ASCII](#ascii) that standardized the characters
      represented by the codes 128 to 255.

- key: api
  ref:
  - abi
  en:
    term: Application Programming Interface
    acronym: API
    def: >
      A set of functions provided by a software library or web service that
      other software can call.

- key: append_mode
  en:
    term: append mode
    def: >
      An option for writing to a file
      in which new data is appended to existing data
      rather than replacing it.

- key: argument
  ref:
  - parameter
  en:
    term: argument
    def: >
      A value passed into a function or method call.

- key: ascii
  ref:
  - ansi_encoding
  en:
    term: ASCII character encoding
    def: >
      A standard way to represent the characters commonly used in the Western
      European languages as 7-bit integers, now largely superceded by
      [Unicode](#unicode).

- key: assembler
  ref:
  - disassembler
  en:
    term: assembler
    def: >
      A [compiler](#compiler) that translates software written in [assembly
      code](#assembly_code) into machine instructions.

- key: assembly_code
  en:
    term: assembly code
    def: >
      A low-level programming language whose statements correspond closely to
      the actual [instruction set](#instruction_set) of a particular kind of
      processor.

- key: assertion
  en:
    term: assertion
    def: >
      A [Boolean expression](#boolean_expression) that must be true at
      a certain point in a program. Assertions may be built into the
      language or provided as functions.

- key: atomic_operation
  en:
    term: atomic operation
    def: >
      An operation that is guaranteed to complete,
      i.e.,
      one that cannot be interrupted part-way through.

- key: atomic_value
  en:
    term: atomic value
    def: >
      A value that cannot be broken down into smaller parts,
      such as a [Boolean](#boolean_value) or integer.

- key: attention_budget
  en:
    term: attention budget
    def: >
      The amount of time your activity is allowed to require of other
      people in an organization.

- key: attribute
  en:
    term: attribute
    def: >
      A name-value pair associated with an object,
      used to store [metadata](#metadata) about
      the object such as an array's dimensions.

- key: authentication
  en:
    term: authentication
    def: >
      The process of establishing identity.
      Authentication relies on something someone knows (such as a password),
      something they have (such as a key card),
      or something they are (such as a fingerprint).

# B

- key: backward_compatible
  en:
    term: backward-compatible
    def: >
      A property of a system that enables interoperability with an older legacy
      system, or with input designed for such a system.

- key: base_class
  ref:
  - child_class
  - derived_class
  - parent_class
  en:
    term: base class
    def: >
      In [object-oriented programming](#oop), a [class](#class) from which other
      classes are derived.

- key: batch_processing
  en:
    term: "batch processing"
    def: >
      Executing a set of non-interactive tasks on a computer,
      such as backing up files
      or copying data from one database to another overnight.

- key: benchmark
  en:
    term: benchmark
    def: >
      A program or set of programs used to measure the performance
      of a computer system.

- key: big_endian
  ref:
  - little_endian
  en:
    term: big endian
    def: >
      A storage scheme in which the most significant part of a number
      is stored in the byte with the lowest address.
      For example,
      the 16-bit big-endian representation of 258 stores 0x01 in the lower byte
      and 0x02 in the higher byte.

- key: big_oh
  ref:
  - space_complexity
  - time_complexity
  en:
    term: big-oh notation
    def: >
      A way to express how the running time or memory requirements of an algorithm increase
      as the size of the problem increases.

- key: binary_mode
  en:
    term: binary mode
    def: >
      An option for reading or writing files in which
      each byte is transferred literally.
      The term is used in contrast with [text mode](#text_mode).

- key: bit_mask
  en:
    term: bit mask
    def: >
      A pattern of bits used to set or clear bits in a byte
      or [word](#word_memory) in memory.

- key: bit_shift
  en:
    term: bit shifting
    def: >
      To move the bits in a byte or [word](#word_memory) left or right.

- key: bitwise_operation
  en:
    term: bitwise operation
    def: >
      An operation that manipulates individual bits in memory. Common bitwise
      operations include `and`, `or`, `not`, and `xor`.

- key: block_memory
  en:
    term: block (of memory)
    def: >
      A region of memory of a fixed, constant size.  Data is often divided
      into blocks to optimize input and output at the hardware level; software
      is then used to convert between blocks and [streams](#stream).

- key: block_page
  en:
    term: block (on page)
    def: >
      A rectangular region of a page that may contain text, images, and other
      visual elements along with other blocks.

- key: boolean_expression
  en:
    term: Boolean expression
    def: >
      An [expression](#expression) that is either true or false, i.e., one
      that produces a [Boolean value](#boolean_value).

- key: boolean_value
  en:
    term: Boolean value
    def: >
      One of the two values "true" or "false".
      Named for George Boole, a 19th century mathematician.

- key: boxed_value
  en:
    term: boxed value
    def: >
      A value (such as an integer) that is embedded in a larger structure in memory
      that carries [metadata](#metadata) about its type,
      how many structures are referring to it,
      and so on.

- key: breakpoint
  en:
    term: breakpoint
    def: >
      A point in a program where a debugger should halt execution
      in order to interact with a user.

- key: bucket
  en:
    term: bucket
    def: >
      A subset of values from a dataset, typically represented by a single bar
      in a histogram.

- key: buffer_memory
  en:
    term: buffer (in memory)
    def: >
      A temporary storage area in memory.

- key: buffer_text
  en:
    term: buffer (of text)
    def: >
      A data structure that stores text while it is being viewed or edited.

- key: build_manager
  en:
    term: build manager
    def: >
      A program that keeps track of how files depend on one another and runs
      commands to update any files that are out-of-date. Build managers were
      invented to [compile](#compile) only those parts of programs that had
      changed but are now often used to implement workflows in which plots
      depend on results files, which in turn depend on raw data files or
      configuration files.

- key: build_recipe
  en:
    term: build recipe
    def: >
      The part of a [build rule](#build_rule) that describes how to update
      something that has fallen out-of-date.

- key: build_rule
  en:
    term: build rule
    def: >
      A specification for a [build manager](#build_manager) that describes how
      some files depend on others and what to do if those files are out-of-date.

- key: build_stale
  en:
    term: stale (in build)
    def: >
      To be out-of-date compared to a [prerequisite](#prerequisite). A [build
      manager](#build_manager) finds and updates things that are stale.

- key: build_target
  en:
    term: target (in build)
    def: >
      The file(s) that a [build rule](#build_rule) will update if they are
      out-of-date compared to their [dependencies](#dependency).

- key: builder_pattern
  en:
    term: Build manager
    def: >
      A [design pattern](#design_pattern) in which a complex object is filled in
      step by step after its creation by calling its methods.

- key: bytecode
  en:
    term: bytecode
    def: >
      A set of instructions designed to be executed efficiently by an
      [interpreter](#interpreter).

# C

- key: cache
  en:
    term: cache
    def: >
      Something that stores copies of data so that future requests for it can be
      satisfied more quickly. The CPU in a computer uses a hardware cache to
      hold recently-accessed values; many programs rely on a software cache to
      reduce network traffic and latency. Figuring out when something in a cache
      is out-of-date and should be replaced is one of the [two hard problems in
      computer science](#two_hard_problems).

- key: call_stack
  en:
    term: call stack
    def: >
      A data structure that stores information about the active subroutines
      executed.

- key: catch_exception
  en:
    term: catch (an exception)
    def: >
      To handle an error or other unexpected event represented by an
      [exception](#exception).

- key: chain_of_responsibility_pattern
  en:
    term: Chain of Responsibility pattern
    def: >
      A [design pattern](#design_pattern) in which each [object](#object) either
      handles a request or passes it on to another object.

- key: character_encoding
  en:
    term: character encoding
    def: >
      A way to represent characters as bytes. Common examples include [ASCII](#ascii)
      and [UTF-8](#utf_8).

- key: child_class
  en:
    term: child class
    def: >
      In [object-oriented programming](#oop), a [class](#class) derived from
      another class (called the [parent class](#parent_class)).

- key: child_tree
  en:
    term: child (in a tree)
    def: >
      A [node](#node) in a [tree](#node) that is below another node (call the
      [parent](#parent_tree)).

- key: circular_dependency
  en:
    term: circular dependency
    def: >
      A situation in which a [build target](#build_target) depends on itself
      either directly or indirectly,
      i.e.,
      a situation in which the [DAG](#dag) of [dependencies](#dependency)
      contains a [cycle](#cycle).

- key: class
  en:
    term: class
    def: >
      In [object-oriented programming](#oop), a structure that combines data and
      operations (called [methods](#method)). The program then uses a
      [constructor](#constructor) to create an [object](#object) with those
      properties and methods. Programmers generally put generic or reusable
      behavior in [parent classes](#parent_class), and more detailed or specific
      behavior in [child classes](#child_class).

- key: class_method
  ref:
  - static_method
  en:
    term: class method
    def: >
      A function defined inside a class that takes the class object as an
      input rather than an instance of the class.

- key: clear_breakpoint
  en:
    term: clear (a breakpoint)
    def: >
      To remove a [breakpoint](#breakpoint) from a program.

- key: client
  en:
    term: client
    def: >
      A program such as a browser that sends requests to a server and does something with the response.

- key: closure
  en:
    term: closure
    def: >
      A record that stores a function and its [environment](#environment)
      so that variables that were in scope when the function was defined
      can still be accessed from within the function even if they are no
      longer visible to other parts of the program.

- key: code_point
  en:
    term: code point
    def: >
      A number that uniquely identifies a character in the [Unicode](#unicode) standard.

- key: cognitive_load
  en:
    term: cognitive load
    def: >
      The mental effort required to solve a problem.

- key: column_wise
  ref:
  - row_wise
  en:
    term: column-wise storage
    def: >
      To organize the memory of a two-dimensional table so that
      the values in each column are laid out in contiguous blocks.

- key: combinatorial_explosion
  en:
    term: combinatorial explosion
    def: >
      The exponential growth in the size of a problem or the time required to
      solve it that arises when all possible combinations of a set of items must
      be searched.

- key: command_pattern
  en:
    term: Command pattern
    def: >
      A [design pattern](#design_pattern) in which operations are represented
      as objects so that they can be stored and re-used.

- key: compact
  en:
    term: compact (data or files)
    def: >
      To pack data so as to remove wasted or unused space.

- key: compile
  en:
    term: compile
    def: >
      To translate textual source into another form. Programs in [compiled
      languages](#compiled_language) are translated into machine instructions
      for a computer to run, and [Markdown](#markdown) is usually translated
      into [HTML](#html) for display.

- key: compiled_language
  en:
    term: compiled language
    def: >
      Originally, a language such as C or Fortran that is translated into
      machine instructions for execution. Languages such as Java are also
      compiled before execution, but into [bytecode](#bytecode) instead of
      machine instructions, while [interpreted languages](#interpreted_language)
      like JavaScript are compiled to byte code on the fly.

- key: compiler
  en:
    term: compiler
    def: >
      An application that translates programs written in some languages into
      machine instructions or [bytecode](#bytecode).

- key: concrete_class
  en:
    term: concrete class
    def: >
      A class that can actually be instantiated.
      The term is used in contrast with [abstract class](#abstract_class).

- key: conditional_breakpoint
  en:
    term: conditional breakpoint
    def: >
      A [breakpoint](#breakpoint) at which the debugger should only halt
      if some user-specified condition is true.

- key: conditional_jump
  en:
    term: conditional jump
    def: >
      An instruction that tells a processor to start executing
      somewhere other than at the next address
      if a condition is true.
      Conditional jumps are used to implement higher-level constructs
      like `if` statements and loops.

- key: confirmation_bias
  en:
    term: confirmation bias
    def: >
      The tendency for someone to look for evidence that they are right rather
      than searching for reasons why they might be wrong.

- key: constructor
  en:
    term: constructor
    def: >
      A function that creates an [object](#object) of a particular
      [class](#class).

- key: context_manager
  en:
    term: context manager
    def: >
      An object that automatically executes some operations
      at the start of a code block
      and some other operations at the end of the block.

- key: continuation_byte
  en:
    term: continuation byte
    def: >
      The second or subsequent byte in a multi-byte [character encoding](#character_encoding).

- key: control_code
  en:
    term: control code
    def: >
      Originally a "character" that made a teletype perform some operation,
      such as moving to the next line or ringing the bell.
      Only a handful of control codes such as tab and newline
      are still in common use.

- key: control_flow
  en:
    term: control flow
    def: >
      The order in which a program executes statements and expressions.

- key: cross_product
  en:
    term: cross product
    def: >
      The set of all possible combinations of items from one or more sets.

- key: cryptographic_hash_function
  en:
    term: cryptographic hash function
    def: >
      A [hash function](#hash_function) that produces an apparently-random value
      for any input.

- key: csv
  en:
    term: CSV
    full: comma-separated values
    def: >
      A text format for tabular data in which each [record](#record) is one row
      and [fields](#field) are separated by commas. There are many minor
      variations, particularly around quoting of [strings](#string).

- key: cycle
  en:
    term: cycle
    def: >
      A path through a [directed graph](#directed_graph)
      that leads from a [node](#node) back to itself.

# D

- key: dag
  en:
    term: directed acyclic graph
    acronym: DAG
    def: >
      A [directed graph](#directed_graph) which does not contain any [cycles](#cycle)
      (i.e., it is not possible to reach a [node](#node) from itself by
      following edges).

- key: dataframe
  en:
    term: dataframe
    def: >
      A two-dimensional data structure for storing tabular data in memory. Rows
      represent [records](#record) and columns represent [fields](#field).

- key: data_engineer
  en:
    term: data engineer
    def: >
      Someone responsible for designing, developing, and maintaining systems
      for collecting, storing, and analyzing data.

- key: data_migration
  en:
    term: data migration
    def: >
      The act of moving data from one system or format to another.

- key: deadlock
  en:
    term: deadlock
    def: >
      A situation in which no one can proceed because everyone
      is blocked on someone else.

- key: debugger
  en:
    term: debugger
    def: >
      A program that enables its user to monitor and control another program,
      typically by [single-stepping](#single_stepping) through its execution
      or setting [breakpoints](#breakpoint).

- key: decorator
  en:
    term: decorator
    def: >
      A function A that can be applied to another function B
      when function B is being defined
      to change its behavior in some way.

- key: defensive_programming
  en:
    term: defensive programming
    def: >
      A set of programming practices that assumes mistakes will happen and
      either reports or corrects them, such as inserting
      [assertions](#assertion) to report situations that are not ever supposed
      to occur.

- key: delayed_construction
  ref:
  - lazy_evaluation
  en:
    term: delayed construction
    def: >
      The practice of constructing an object after something that needs it
      has been constructed rather than before.

- key: dependency
  en:
    term: dependency (in build)
    def: >
      Something that a [build target](#build_target) depends on.

- key: derived_class
  ref:
  - child_class
  en:
    term: derived class
    def: >
      In [object-oriented programming](#oop), a class that is a direct or
      indirect extension of a [base class](#base_class).

- key: design_by_contract
  ref:
  - liskov_substitution_principle
  en:
    term: design by contract
    def: >
      A style of designing software in which functions specify the
      [pre-conditions](#pre_condition) that must be true in order for them to
      run and the [post-conditions](#post_condition) they guarantee will be true
      when they return. A function can then be replaced by one with weaker
      pre-conditions (i.e., it accepts a wider set of input) and/or stronger
      post-conditions (i.e., it produces a smaller range of output) without
      breaking anything else.

- key: design_pattern
  ref:
  - iterator_pattern
  - singleton_pattern
  - template_method_pattern
  - visitor_pattern
  en:
    term: design pattern
    def: >
      A recurring pattern in software design that is specific enough to be worth
      naming, but not so specific that a single best implementation can be
      provided by a [library](#library).

- key: dictionary
  en:
    term: dictionary
    def: >
      A data structure that allows items to be looked up by value.
      Dictionaries are often implemented using [hash tables](#hash_table).

- key: dictionary_comprehension
  ref:
  - list_comprehension
  en:
    term: dictionary comprehension
    def: >
      A single expression that constructs a dictionary
      by looping over key-value pairs.

- key: directed_graph
  en:
    term: directed graph
    def: >
      A [graph](#graph_data) whose [edges](#edge) have directions.

- key: disassemble
  en:
    term: disassemble
    def: >
      To convert machine instructions into [assembly code](#assembly_code)
      or some higher-level language.

- key: disassembler
  ref:
  - assembler
  en:
    term: disassembler
    def: >
      A program that translates machine instructions into
      [assembly code](#assembly_code) or some higher-level language.

- key: dns
  en:
    term: Domain Name System
    acronym: DNS
    def: >
      A decentralized naming system for computers that translates [hostnames](#hostname)
      into the [IP address](#ip_address) of particular computers.

- key: dom
  en:
    term: DOM
    full: Document Object Model
    def: >
      A standard, in-memory representation of [HTML](#html) and [XML](#xml).
      Each [element](#element) is stored as a [node](#node) in a [DOM tree](#dom_tree)
      with a set of named [attributes](#attribute); contained elements are
      [child nodes](#child_tree).
    acronym: DOM

- key: dom_tree
  en:
    term: DOM tree
    def: >
      The [tree](#tree) formed by a set of properly-nested [DOM](#dom) [nodes](#node).

- key: docstring
  en:
    term: docstring
    def: >
      A string at the start of a module, class, or function in Python
      that is not assigned to a variable,
      which is used to hold the documentation for that part of code.

- key: dry_run
  en:
    term: dry run
    def: >
      An execution of a program that doesn't change anything.

- key: duck_typing
  en:
    term: duck typing
    def: >
      A programming style in which the methods an object happens to have
      determines how it can be used,
      rather than what classes it inherits from.

- key: dynamic_dispatch
  en:
    term: dynamic dispatch
    def: >
      To find a function or a property of an [object](#object) by name while a
      program is running. For example, instead of getting a specific property of
      an object using `obj.name`, a program might use `obj[someVariable]`, where
      `someVariable` could hold `"name"` or some other property name.

- key: dynamic_scoping
  en:
    term: dynamic scoping
    def: >
      To find the value of a variable by looking at what is on the [call
      stack](#call_stack) at the moment the lookup is done. Almost all
      programming languages use [lexical scoping](#lexical_scoping) instead,
      since it is more predictable.

- key: dynamic_typing
  ref:
  - static_typing
  - type_hint
  en:
    term: dynamic typing
    def: >
      A system in which types are checked as the program is running.

# E

- key: eager_evaluation
  ref:
  - lazy_evaluation
  en:
    term: eager evaluation
    def: >
      Evaluating expressions before they are used.

- key: easy_mode
  en:
    term: easy mode
    def: >
      A term borrowed from gaming meaning to do something with obstacles or
      difficulties simplified or removed, often for practice purposes.

- key: edge
  en:
    term: edge
    def: >
      A connection between two [nodes](#node) in a [graph](#graph_data). An edge may
      have data associated with it, such as a name or distance.

- key: element
  en:
    term: element (in HTML)
    def: >
      A named component in an [HTML](#html) or [XML](#xml) document. Elements
      are usually written `<name>`…`</name>`, where "…" represents the
      content of the element. Elements often have [attributes](#attribute).

- key: enumeration
  en:
    term: enumeration
    def: >
      A set of distinct named values defined in a program.

- key: environment
  en:
    term: environment
    def: >
      The set of variables currently defined in a program.

- key: error_handling
  en:
    term: error handling
    def: >
      What a program does to detect and correct for errors. Examples include
      printing a message and using a default configuration if the user-specified
      configuration cannot be found.

- key: error_test
  en:
    term: error (result of test)
    def: >
      Signalled when something goes wrong in a [unit test](#unit_test) itself
      rather than in the system being tested. In this case, we do not know
      anything about the correctness of the system.

- key: escape_sequence
  en:
    term: escape sequence
    def: >
      A series of two or more characters used to represent a character
      that otherwise couldn't be represented.
      For example, the escape sequence `\"` is used to represent a single `"` character
      inside a double-quoted string.

- key: exception
  en:
    term: exception
    def: >
      An object that stores information about an error or other unusual event in
      a program. One part of a program will create and [raise an
      exception](#raise_exception) to signal that something unexpected has
      happened; another part will [catch](#catch_exception) it.

- key: exclusive_or
  en:
    term: exclusive or
    def: >
      A logical (or bitwise) operator that is true (or 1) if its arguments
      have different values and false (or 0) if they are the same.
      Exclusive or implements "either/or" or "one or the other".

- key: expected_result
  en:
    term: expected result (of test)
    def: >
      The value that a piece of software is supposed to produce when tested in a
      certain way, or the state in which it is supposed to leave the system.

- key: exponent
  ref:
  - mantissa
  en:
    term: exponent
    def: >
      The portion of a floating-point number that controls placement of the decimal point.

- key: expression
  ref:
  - statement
  en:
    term: expression
    def: >
      A part of a program that produces a value, such as `1+2`.

- key: extensibility
  en:
    term: extensibility
    def: >
      How easily new features can be added to a program
      or existing features can be changed.

- key: extract_parent_class_refactoring
  en:
    term: Extract Parent Class refactoring
    def: >
      A [refactoring](#refactor) in which some functionality of an existing class
      or set of classes is moved into a newly-created [parent class](#parent_class).

# F

- key: factory_method
  en:
    term: factory method
    def: >
      A [method](#method) whose only job is to construct an object of some type.
      Factory methods are typically created to make it easier for
      [child classes](#child_class) to construct objects of other types.

- key: fail_test
  en:
    term: failure (result of test)
    def: >
      A test fails if the [actual result](#actual_result) does not match the
      [expected result](#expected_result).

- key: false_negative
  ref:
  - false_positive
  en:
    term: false negative
    def: >
      A report that something is missing when it is actually present.

- key: false_positive
  ref:
  - false_negative
  en:
    term: false positive
    def: >
      A report that something is present when it is actually absent.

- key: falsy
  ref:
  - truthy
  en:
    term: falsy
    def: >
      Refers to a value that is treated as false in Boolean expressions.
      In Python, this includes empty strings and lists
      and the number zero.

- key: field
  en:
    term: field
    def: >
      A component of a [record](#record) containing a single value. Every record
      in a database [table](#table) has the same fields.

- key: file_compression
  en:
    term: "compression (of file)"
    def: >
      Any of several techniques for reducing the size required to store a file.
      Compression works by finding patterns and replacing them with shorter
      sequences of bits or bytes.

- key: file_locking
  en:
    term: "file locking"
    def: >
      The act of restricting updates to a file, or its deletion, so that operations
      on it appear [atomic](#atomic_operation).

- key: fixture
  en:
    term: fixture
    def: >
      The thing on which a test is run, such as the [parameters](#parameter) to
      the function being tested or the file being processed.

- key: format_string
  en:
    term: format string
    def: >
      A string that contains special markers showing how to format values.
      For example, the string `"{age:02d} years old"` specifies that
      the value of `age` is to be inserted at the front of the string
      and formatted as a 2-digit decimal number with a leading 0 (if necessary).

# G

- key: garbage_collection
  en:
    term: garbage collection
    def: >
      An automatic process in a program that finds and recycles memory
      that is no longer being used.

- key: generic_function
  en:
    term: generic function
    def: >
      A collection of functions with similar purpose, each operating on a
      different class of data.

- key: global
  ref:
  - local
  en:
    term: global
    def: >
      Referring to the top or outermost [scope](#scope) a program.

- key: globbing
  ref:
  - regular_expression
  en:
    term: globbing
    def: >
      Matching filenames against patterns.
      The name comes from an early Unix utility called `glob` (short for "global").
      Glob patterns are a subset of [regular expressions](#regular_expression).

- key: grammar
  en:
    term: grammar
    def: >
      The rules that define a formal language recognized by a [parser](#parser).

- key: graph_data
  ref:
  - tree
  en:
    term: graph (data structure)
    def: >
      A data structure in which [nodes](#node) are connected to one another
      by [edges](#edge).

- key: greedy_matching
  ref:
  - lazy_matching
  en:
    term: greedy matching
    def: >
      Matching as much as possible while still finding a valid match.

# H

- key: hash_code
  en:
    term: hash code
    def: >
      A value generated by a [hash function](#hash_function). Good hash codes
      have the same properties as random numbers in order to reduce the
      frequency of [collisions](#hash_collision).

- key: hash_collision
  en:
    term: collision (in hashing)
    def: >
      A situation in which two or more values have the same [hash code](#hash_code).

- key: hash_function
  en:
    term: hash function
    def: >
      A function that turns arbitrary data into a bit array, or a [key](#key),
      of a fixed size. Hash functions are used to determine where data should be
      stored in a [hash table](#hash_table).

- key: hash_table
  en:
    term: hash table
    def: >
      A data structure that calculates a pseudo-random key (location) for each
      value passed to it and stores the value in that location. Hash tables
      enable fast lookup for arbitrary data. This occurs at the cost of extra
      memory because hash tables must always be larger than the amount of
      information they need to store, to avoid the possibility of data
      collisions, when the hash function returns the same key for two different
      values.

- key: headless
  en:
    term: headless application
    def: >
      An application run without its usual graphical interface.  Browsers,
      editors, and other applications are often run headless for testing purposes.

- key: helper_class
  en:
    term: helper class
    def: >
      A [class](#class) created to support another class
      that has no other purpose on its own.

- key: helper_function
  en:
    term: helper function
    def: >
      A function created to support another function (or functions)
      that has no other use on its own.

- key: helper_method
  en:
    term: helper method
    def: >
      A [method](#method) designed to be used only by other methods in the
      same [class](#class).  Helper methods are usually created to keep
      other methods short and readable.

- key: heterogeneous
  ref:
  - homogeneous
  en:
    term: heterogeneous
    def: >
      Containing mixed data types. For example, an array in Javascript can
      contain a mix of numbers, character strings, and values of other types.

- key: hexadecimal
  en:
    term: hexadecimal
    def: >
      A base-16 numerical representation that uses the letters A-F (or a-f)
      to represent the values from 10 to 15.

- key: homogeneous
  ref:
  - heterogeneous
  en:
    term: homogeneous
    def: >
      Containing a single data type. For example, a [vector](#vector) must be
      homogeneous: its values must all be numeric, logical, etc.

- key: hostname
  en:
    term: hostname
    def: >
      The human-readable name for a networked computer, such as `example.com`.

- key: html
  ref:
  - xml
  en:
    term: HTML
    full: HyperText Markup Language
    def: >
      The standard [markup language](#markup_language) used for web pages. HTML
      is represented in memory using [DOM](#dom) (Digital Object Model).

- key: http
  en:
    term: HTTP
    full: HyperText Transfer Protocol
    def: >
      The protocol used to exchange information between browsers and websites,
      and more generally between other clients and servers.
      Communication consists of [requests](#http_request) and [responses](#http_response).

- key: http_body
  en:
    term: body (of HTTP request or response)
    def: >
      The "extra" data associated with an [HTTP request](#http_request) or [response](#http_response),
      such as the file being uploaded or the page being returned for display.

- key: http_header
  en:
    term: header (of HTTP request or response)
    def: >
      A name-value pair at the start of an [HTTP request](#http_request) or [response](#http_response).
      Headers are used to specify what data formats the sender can handle,
      the date and time the message was sent,
      and so on.

- key: http_method
  en:
    term: HTTP method
    def: >
      The verb in an [HTTP request](#http_request) that defines what the [client](#client) wants to do.
      Common methods are `GET` (to get data) and `POST` (to submit data).

- key: http_protocol_version
  en:
    term: HTTP protocol version
    def: >
      Specifies the version of [HTTP](#http) being used,
      which in turn defines what headers can appear,
      how they are to be interpreted, etc.

- key: http_request
  en:
    term: HTTP request
    def: >
      A precisely-formatted block of text sent from a [client](#client) such as a browser
      to a [server](#server)
      that specifies what resource is being requested,
      what data formats the client will accept, etc.

- key: http_response
  en:
    term: HTTP response
    def: >
      A precisely-formatted block of text sent from a [server](#server)
      back to a [client](#client) in reply to a [request](#http_request).

- key: http_status_code
  en:
    term: HTTP status code
    def: >
      A numerical code that indicates what happened when an [HTTP request](#http_request) was processed,
      such as 200 (OK),
      404 (not found),
      or 500 (internal server error).

# I

- key: immutable
  en:
    term: immutable
    def: >
      Data that cannot be changed after being created. Immutable data is easier
      to think about, particularly if data structures are shared between several
      tasks, but may result in higher memory requirements.

- key: index_database
  en:
    term: index (a database)
    def: >
      An auxiliary data structure in a database used to speed up search for some
      entries. An index increases memory and disk requirements but reduces
      search time.

- key: infinite_loop
  ref:
  - infinite_recursion
  en:
    term: infinite loop
    def: >
      A loop (usually a `while` loop) that never ends because its controlling condition
      is never false.

- key: infinite_recursion
  en:
    term: infinite recursion
    def: >
      [Recursion](#recursion) that never stops because it never reaches a case
      that doesn't require further evaluation;
      the recursive equivalent of an [infinite loop](#infinite_loop).

- key: infix_notation
  ref:
  - prefix_notation
  - postfix_notation
  en:
    term: infix notation
    def: >
      Writing expressions with operators between operands, as in `1 + 2` to add 1 and 2.

- key: inheritance
  ref:
  - multiple_inheritance
  en:
    term: inheritance
    def: >
      The act of creating a new [class](#class) from an existing class,
      typically by adding or changing its properties or [methods](#method).

- key: instance
  en:
    term: instance
    def: >
      An [object](#object) of a particular [class](#class).

- key: instruction_pointer
  en:
    term: instruction pointer
    def: >
      A special [register](#register_hardware) in a processor that stores the address of
      the next instruction to execute.

- key: instruction_set
  en:
    term: instruction set
    def: >
      The basic operations that a particular processor can execute directly.

- key: internet_protocol
  en:
    term: Internet Protocol
    acronym: IP
    def: >
      A set of specifications for ways computers can communicate.
      [TCP/IP](#tcp) is the most widely used.

- key: interpreted_language
  en:
    term: interpreted language
    def: >
      A high-level language that is not executed directly by the computer, but
      instead is run by an [interpreter](#interpreter) that translates program
      instructions into machine commands on the fly.

- key: interpreter
  en:
    term: interpreter
    def: >
      A program that runs programs written in a high-level
      [interpreted language](#interpreted_language). Interpreters can run
      interactively but may also execute commands saved in a file.

- key: intrinsic_complexity
  en:
    term: intrinsic complexity
    def: >
      The inherent difficult of a problem. The term is used in contrast
      to [accidental complexity](#accidental_complexity).

- key: introspection
  en:
    term: introspection
    def: >
      See [reflection](#reflection).

- key: ip_address
  en:
    term: IP address
    acronym: IP
    def: >
      A four-part number that uniquely identifies a computer on a network.

- key: iso_date_format
  en:
    term: ISO date format
    def: >
      An international standard for formatting dates. While the full standard is complex,
      the most common form is `YYYY-MM-DD`, i.e., a four-digit year, a two-digit
      month, and a two-digit day, separated by hyphens.

- key: iterator
  en:
    term: iterator
    def: >
      A function or object that produces each value from a collection
      in turn for processing.

- key: iterator_pattern
  ref:
  - visitor_pattern
  en:
    term: Iterator pattern
    def: >
      A [design pattern](#design_pattern) that uses
      [iterators](#iterator) to hide the differences between different
      kinds of data structures so that everything can be processed
      using loops.

# J

- key: join
  en:
    term: join (tables)
    def: >
      An operation that combines two [tables](#table), typically by matching
      [keys](#key) from one with keys from another.

- key: json
  en:
    term: JSON
    full : JavaScript Object Notation
    def: >
      A way to represent data by combining basic values like numbers and
      character strings in [lists](#list) and [key-value](#dictionary)
      structures. The acronym stands for "JavaScript Object Notation"; unlike
      better-defined standards like [XML](#xml), it is unencumbered by a syntax
      for comments or ways to define a [schema](#schema).

# K

- key: key
  en:
    term: key
    def: >
      A [field](#field) or combination of fields whose value(s) uniquely
      identify a [record](#record) within a [table](#table) or dataset. Keys are
      often used to select specific records and in [joins](#join).

- key: key_value_store
  en:
    term: key-value store
    def: >
      A simple form of database in which each [record](#record) can only be
      accessed by a single [key](#key).

# L

- key: label_address
  en:
    term: label (of address in memory)
    def: >
      A human-readable name given to a particular location in memory when
      writing programs in [assembly code](#assembly_code).

- key: lambda_expression
  en:
    term: lambda expression
    def: >
      An expression that takes zero or more parameters and produces a result.
      A lambda expression is sometimes called an
      [anonymous function](#anonymous_function);
      the name comes from the mathematical symbol λ
      used to represent such expressions.

- key: layout_engine
  en:
    term: layout engine
    def: >
      A piece of software that decides where to place text, images, and other
      elements on a page.

- key: lazy_evaluation
  ref:
  - eager_evaluation
  en:
    term: lazy evaluation
    def: >
      Evaluating expressions only when absolutely necessary.

- key: lazy_matching
  ref:
  - greedy_matching
  en:
    term: lazy matching
    def: >
      Matching as little as possible while still finding a valid match.

- key: lexical_scoping
  en:
    term: lexical scoping
    def: >
      To look up the value associated with a name according to the textual
      structure of a program. Most programming languages use lexical scoping
      instead of [dynamic scoping](#dynamic_scoping) because the latter is less
      predictable.

- key: library
  en:
    term: library
    def: >
      An installable collection of software, also often called a
      [module](#module) or [package](#package).

- key: link
  en:
    term: link (a program)
    def: >
      To combine separately [compiled](#compiled_language) modules
      into a single runnable program.

- key: linter
  en:
    term: linter
    def: >
      A program that checks for common problems in software, such as violations
      of indentation rules or variable naming conventions. The name comes from
      the first tool of its kind, called `lint`.

- key: liskov_substitution_principle
  en:
    term: Liskov Substitution Principle
    def: >
      A design rule stating that it should be possible to replace objects in a
      program with objects of derived classes without breaking the program.
      [Design by contract](#design_by_contract) is intended to enforce this rule.

- key: list
  en:
    term: list
    def: >
      A [vector](#vector) that can contain values of many different
      ([heterogeneous](#heterogeneous)) types.

- key: list_comprehension
  en:
    term: list comprehension
    def: >
      A single expression that constructs a list
      by looping over its items.

- key: literal
  en:
    term: literal (in parsing)
    def: >
      A representation of a fixed value in a program, such as the digits `123`
      for the number 123 or the characters `"abc"` for the string containing
      those three letters.

- key: little_endian
  ref:
  - big_endian
  en:
    term: little endian
    def: >
      A storage scheme in which the most significant part of a number
      is stored in the byte with the highest address.
      For example,
      the 16-bit big-endian representation of 258 stores 0x02 in the lower byte
      and 0x01 in the higher byte.

- key: local
  ref:
  - global
  en:
    term: local
    def: >
      Referring to the current or innermost [scope](#scope) in a program.

- key: log_file
  en:
    term: log file
    def: >
      A file to which a program writes status or debugging information
      for later analysis.

- key: log_structured_db
  en:
    term: log-structured database
    def: >
      A database to which data can only be appended,
      i.e.,
      existing records cannot be overwritten.

# M

- key: manifest
  en:
    term: manifest
    def: >
      A list of something's parts or components.

- key: mantissa
  ref:
  - exponent
  en:
    term: mantissa
    def: >
      The portion of a floating-point number that defines its specific value.

- key: markdown
  en:
    term: Markdown
    def: >
      A [markup language](#markup_language) with a simple syntax intended as a
      replacement for [HTML](#html).

- key: markup_language
  ref:
  - xml
  en:
    term: markup language
    def: >
      A set of rules for annotating text to define its meaning or how it should
      be displayed. The markup is usually not displayed, but instead controls
      how the underlying text is interpreted or shown. [Markdown](#markdown) and
      [HTML](#html) are widely-used markup languages for web pages.

- key: metadata
  en:
    term: metadata
    def: >
      Data about data,
      such as the time a dataset was archived.

- key: method
  en:
    term: method
    def: >
      An implementation of a [generic function](#generic_function) that handles
      objects of a specific class.

- key: method_injection
  en:
    term: method injection
    def: >
      To add methods to an existing class after its definition.

- key: minimum_testable_class
  en:
    term: minimum testable class
    def: >
      The simplest extension to an [abstract class](#abstract_class)
      that can actually be used,
      particularly in tests.

- key: mixin_class
  en:
    term: mixin class
    def: >
      A class that is not meant to be instantiated itself
      but which contains methods to be added to other classes
      (typically via [multiple inheritance](#multiple_inheritance)).

- key: mock_object
  en:
    term: mock object
    def: >
      A simplified replacement for part of a program whose behavior is easy to
      control and predict. Mock objects are used in [unit tests](#unit_test) to
      simulate databases, web services, and other complex systems.

- key: model
  en:
    term: model
    def: >
      A set of values for variables that satisfies a specific set of constraints.

- key: module
  en:
    term: module
    def: >
      A reusable software [package](#package), also often called a
      [library](#library).

- key: monkey_patching
  en:
    term: monkey patching
    def: >
      To replace [methods](#method) in a [class](#class) or [object](#object)
      at run-time without modifying the original code.

- key: multiple_inheritance
  en:
    term: multiple inheritance
    def: >
      Inheriting from two or more classes when creating a new class.

# N

- key: name_collision
  en:
    term: name collision
    def: >
      A situation in which two or more things are trying to use the same name
      at the same time or in the same [scope](#scope).

- key: named_tuple
  en:
    term: named tuple
    def: >
      A tuple whose fields can be accessed by name as well as by location.
      Named tuples are used to implement records
      that don't have any associated [methods](#method).

- key: node
  en:
    term: node
    def: >
      An element of a [graph](#graph_data) that is connected to other nodes by
      [edges](#edge). Nodes typically have data associated with them, such as
      names or weights.

- key: null_byte
  en:
    term: null byte
    def: >
      A byte with the value zero.
      Null bytes are used to mark the ends of strings in C and C++,
      and are sometimes used to fill unused space in fixed-size binary records.

- key: null_object_pattern
  en:
    term: Null Object pattern
    def: >
      A [design pattern](#design_pattern) in which a placeholder object is
      used instead of `None`. The placeholder object has the methods of the
      object usually used, but those methods do nothing. This pattern saves
      other code from having to check repeatedly for `None`.

# O

- key: object
  en:
    term: object
    def: >
      In [object-oriented programming](#oop), a structure that contains the data
      for a specific instance of a [class](#class). The operations the object is
      capable of are defined by the class's [methods](#method).

- key: orm
  en:
    term: object-relational mapper
    acronym: ORM
    def: >
      A [library](#library) that converts [objects](#object) in memory to
      [records](#record) in a [relational database](#relational_database)
      and vice versa.

- key: off_by_one_error
  en:
    term: off-by-one error
    def: >
      A common error in programming in which the program refers to element `i`
      of a structure when it should refer to element `i-1` or `i+1`, or
      processes `N` elements when it should process `N-1` or `N+1`.

- key: olap
  en:
    term: online analytical processing
    acronym: OLAP
    def: >
      Analyzing data in bulk.
      The term is used in contrast to [OLTP](#oltp).

- key: oltp
  en:
    term: online transaction processing
    acronym: OLTP
    def: >
      Adding records to a database or querying individual records.
      The term is used in contrast to [OLAP](#olap).

- key: oop
  en:
    term: object-oriented programming
    def: >
      A style of programming in which functions and data are bound together in
      [objects](#object) that only interact with each other through well-defined
      interfaces.
    acronym: OOP

- key: op_code
  en:
    term: op code
    def: >
      The numerical operation code for an instruction that a processor can execute.

- key: open_closed_principle
  en:
    term: Open-Closed Principle
    def: >
      A design rule stating that software should be open for extension but
      closed for modification, i.e., it should be possible to extend
      functionality without having to rewrite existing code.

- key: operator_overloading
  en:
    term: operator overloading
    def: >
      Defining or redefining the implementation of built-in operators
      like `+`.

# P

- key: package
  en:
    term: package
    def: >
      A collection of code, data, and documentation that can be distributed and
      re-used. Also referred to in some languages as a [library](#library) or
      [module](#module).

- key: page
  en:
    term: page
    def: >
      A fixed-size block of storage space.
      Most modern filesystems manage disks using 4K pages,
      and many other applications such as databases
      use the same page size to maximize efficiency.

- key: parameter
  ref:
  - argument
  en:
    term: parameter
    def: >
      The name that a function gives to one of the values passed to it when it is called.

- key: parameter_sweeping
  en:
    term: parameter sweeping
    def: >
      To execute a program multiple times with different parameters
      to find out how its behavior or performance depends on those parameters.

- key: parent_class
  en:
    term: parent class
    def: >
      In [object-oriented programming](#oop), the [class](#class) from which a
      subclass (called the [child class](#child_class)) is derived.

- key: parent_tree
  en:
    term: parent (in a tree)
    def: >
      A [node](#node) in a [tree](#node) that is above another node (called a
      [child](#child_tree)). Every node in a tree except the [root
      node](#root_tree) has a single parent.

- key: parser
  en:
    term: parser
    def: >
      A function or program that reads text formatted according to some [grammar](#grammar)
      and converts it to a data structure in memory.
      Every programming language has a parser that reads programs written in that language;
      parsers also exist for various data formats.

- key: pass_test
  en:
    term: pass (result of test)
    def: >
      A test passes if the [actual result](#actual_result) matches the [expected
      result](#expected_result).

- key: patch
  en:
    term: patch
    def: >
      A single file containing a set of changes to a set of files, separated by
      markers that indicate where each individual change should be applied,
      or the [semantic versioning](#semantic_versioning) identifier
      for such a file.

- key: path_resolution
  en:
    term: path resolution
    def: >
      The process of converting the filename portion of a [URL](#url)
      into a specific file on disk.

- key: persistence
  en:
    term: persistence
    def: >
      The act of saving and restoring data,
      particularly [heterogeneous](#heterogeneous) data
      with irregular structure.

- key: phony_target
  en:
    term: phony target
    def: >
      A [build recipe](#build_recipe) that doesn't update any files.
      Phony targets are typically used to make tasks such as running tests
      reproducible.

- key: pipe_shell
  en:
    term: pipe (in the Unix shell)
    def: >
      The `|` used to make the output of one command the input of the next.

- key: placeholder_file
  en:
    term: placeholder file
    def: >
      A file stored in place of some other file (such as a large dataset)
      that contains [metadata](#metadata) about that other file.

- key: polymorphism
  en:
    term: polymorphism
    def: >
      Having many different implementations of the same interface. If a set of
      functions or objects are polymorphic, they can be called interchangeably.

- key: port
  en:
    term: port
    def: >
      A logical endpoint for communication,
      like a phone number in an office building.
      Only one program on a computer may use a particular port on that computer at any time.

- key: post_condition
  ref:
  - design_by_contract
  - pre_condition
  en:
    term: post-condition
    def: >
      Something that is guaranteed to be true after a function runs
      successfully. Post-conditions are often expressed as
      [assertions](#assertion) that are guaranteed to be true
      of a function's results.
  break: true

- key: postfix_notation
  ref:
  - infix_notation
  - prefix_notation
  en:
    term: postfix notation
    def: >
      Writing expressions with the operator after the operand, as in `2 3 +` to add 2 and 3.

- key: prefix_notation
  ref:
  - infix_notation
  - postfix_notation
  en:
    term: prefix notation
    def: >
      Writing expressions with the operator in front of the operand, as in `+ 3 4` to add 3 and 4.

- key: pre_condition
  ref:
  - design_by_contract
  - post_condition
  en:
    term: pre-condition
    def: >
      Something that must be true before a function runs in order for it to
      work correctly. Pre-conditions are often expressed as
      [assertions](#assertion) that must be true of a function's inputs in
      order for it to run successfully.

- key: prerequisite
  ref:
  - dependency
  en:
    term: prerequisite
    def: >
      Something that a [build target](#build_target) depends on.

- key: pretty_print
  en:
    term: pretty print
    def: >
      To format textual output in a way that makes it easier to read.

- key: profiler
  en:
    term: profiler
    def: >
      A tool that measures one or more aspects of a program's performance.

- key: profiling
  ref:
  - profiler
  en:
    term: profiling
    def: >
      The act of measuring where a program spends its time,
      which operations consume memory or disk space,
      etc.

- key: protocol
  en:
    term: protocol
    def: >
      A set of rules that something promises to obey,
      i.e.,
      the contract between that thing and its users.

- key: pythonic
  en:
    term: Pythonic
    def: >
      Conforming to common Python programming style and practices.

# Q

- key: query_parameter
  en:
    term: query parameter
    def: >
      A key-value pair appended to the path portion of a [URL](#url).

# R

- key: raise_exception
  ref:
  - throw_exception
  en:
    term: raise (an exception)
    def: >
      To signal that something unexpected or unusual has happened in a program
      by creating an [exception](#exception) and handing it to the
      [error-handling](#error_handling) system, which then tries to find a point
      in the program that will [catch](#catch_exception) it.

- key: record
  en:
    term: record
    def: >
      A group of related values that are stored together. A record may be
      represented as a [tuple](#tuple) or as a row in a [table](#table); in the
      latter case, every record in the table has the same [fields](#field).

- key: recursion
  en:
    term: recursion
    def: >
      To define something in terms of itself,
      or the act of a function invoking itself (directly or indirectly).

- key: recursive_enumeration_pattern
  en:
    term: Recursive Enumeration pattern
    def: >
      A [design pattern](#design_pattern) that generates the
      [cross product](#cross_product) of a set of items
      using recursive function calls.
      Each level of recursion adds items from one more set of possibilities
      to an [accumulator](#accumulator).

- key: refactor
  en:
    term: refactor
    def: >
      To rewrite existing code in order to make it simpler or more efficient
      without changing its functionality.

- key: reflection
  en:
    term: reflection
    def: >
      To inspect the properties of a running program in a generic way.
      Reflection relies on the fact that a program is just another data structure.

- key: register_code
  en:
    term: register (in code)
    def: >
      To add a function, class, or other object to a lookup table for later use.

- key: register_hardware
  en:
    term: register (in hardware)
    def: >
      A small piece of memory (typically one [word](#word_memory) long) built
      into a processor that operations can refer to directly.

- key: regular_expression
  en:
    term: regular expression
    def: >
      A pattern for matching text, written as text itself. Regular expressions
      are sometimes called "regexp", "regex", or "RE", and are powerful tools
      for working with text.

- key: race_condition
  en:
    term: race condition
    def: >
      A situation in which a result depends on the order in which two or more
      concurrent operations are carried out.

- key: relative_error
  en:
    term: relative error
    def: >
      The absolute value of the difference between the actual and correct value
      divided by the correct value. For example, if the actual value is 9 and
      the correct value is 10, the relative error is 0.1. Relative error is
      usually more useful than [absolute error](#absolute_error).

- key: relational_database
  ref:
  - sql
  en:
    term: relational database
    def: >
      A database that organizes information into [tables](#table), each of which
      has a fixed set of named [fields](#field) (shown as columns) and a
      variable number of [records](#record) (shown as rows).

- key: reverse_lookup
  en:
    term: reverse lookup
    def: >
      To find the key associated with a particular value in a table.

- key: root_tree
  en:
    term: root (in a tree)
    def: >
      The [node](#node) in a [tree](#tree) of which all other nodes are direct
      or indirect [children](#child_tree), or equivalently the only node in the
      tree that has no [parent](#parent_tree).

- key: row_wise
  ref:
  - column_wise
  en:
    term: row-wise storage
    def: >
      To organize the memory of a two-dimensional table so that
      the values in each row are laid out in contiguous blocks.

- key: runtime
  en:
    term: runtime
    def: >
      A program that implements the basic operations used in a programming language.

# S

- key: schema
  en:
    term: schema
    def: >
      A specification of the format of a dataset, including the name, format,
      and content of each [table](#table).

- key: scope
  en:
    term: scope
    def: >
      A region of a program in which names can be defined
      without colliding with definitions in other parts of the program.
      In Python,
      each [module](#module) and function creates a new scope.

- key: scoring_function
  en:
    term: scoring function
    def: >
      A function that measures how good a solution to a problem is.

- key: search_space
  en:
    term: search space
    def: >
      The set of all possible solutions to a problem,
      i.e.,
      the set of possibilities that an algorithm must search through
      to find an answer.

- key: semantic_versioning
  en:
    term: semantic versioning
    def: >
      A standard for identifying software releases. In the version identifier
      `major.minor.patch`, `major` changes when a new version of software is
      incompatible with old versions, `minor` changes when new features are
      added to an existing version, and `patch` changes when small bugs
      are fixed.

- key: server
  en:
    term: server
    def: >
      A program that waits for requests from [clients](#client)
      and sends them data in response.

- key: sha256
  en:
    term: SHA-256 (hash function)
    def: >
      A [cryptographic hash function](#cryptographic_hash_function) that
      produces a 256-bit output.

- key: sign_magnitude
  ref:
  - twos_complement
  en:
    term: sign and magnitude
    def: >
      A binary representation of integers in which
      one bit indicates whether the value is positive or negative
      and the remaining bits indicate its magnitude.

- key: signature
  en:
    term: signature
    def: >
      The ordered list of parameters and return values that specifies
      how a function must be called
      and what it returns.

- key: single_stepping
  en:
    term: single stepping
    def: >
      To step through a program one line or instruction at a time.

- key: singleton
  ref:
  - singleton_pattern
  en:
    term: singleton
    def: >
      A set with only one element, or a [class](#class) with only one
      [instance](#instance).

- key: singleton_pattern
  en:
    term: Singleton pattern
    def: >
      A [design pattern](#design_pattern) that creates a [singleton](#singleton)
      [object](#object) to manage some resource or service, such as a database
      or [cache](#cache). In [object-oriented programming](#oop), the pattern is
      usually implemented by hiding the [constructor](#constructor) of the
      [class](#class) in some way so that it can only be called once.

- key: socket
  en:
    term: socket
    def: >
      A communication channel between two computers
      that provides an interface similar to reading and writing files.

- key: space_complexity
  ref:
  - time_complexity
  en:
    term: space complexity
    def: >
      The way the memory required by an algorithm grows as a function of the problem size,
      usually expressed using [big-oh notation](#big_oh).

- key: spread
  en:
    term: spread
    def: >
      To automatically match the values from a list or dictionary supplied by the caller
      to the parameters of a function.

- key: sql
  en:
    term: SQL
    def: >
      The language used for writing queries for a [relational database](#relational_database).
      The term was originally an acronym for Structured Query Language.

- key: stable_sort
  en:
    term: stable sort
    def: >
      A sorting algorithm that preserves the original order of items
      that are considered equal.

- key: stack_frame
  en:
    term: stack frame
    def: >
      A section of the [call stack](#call_stack) that records details of a
      single call to a specific function.

- key: statement
  ref:
  - expression
  en:
    term: statement
    def: >
      A part of a program that doesn't produce a value. `for` loops and
      `if` statements are statements in Python.

- key: static_site_generator
  en:
    term: static site generator
    acronym: SSG
    def: >
      A software tool that creates HTML pages from templates and content.

- key: static_method
  ref:
  - class_method
  en:
    term: static method
    def: >
      A function that is defined within a class but does not require
      either the class itself or an instance of the class as a parameter.

- key: static_typing
  ref:
  - dynamic_typing
  - type_hint
  en:
    term: static typing
    def: >
      A system in which the types of values are checked as code is
      being [compiled](#compiled_language).

- key: stderr
  ref:
  - stdin
  - stdout
  en:
    term: standard error
    def: >
      A predefined communication channel typically used to report errors.

- key: stdin
  ref:
  - stderr
  - stdout
  en:
    term: standard input
    def: >
      A predefined communication channel typically used to read input
      from the keyboard or from the previous process in a
      [pipe](#pipe_shell).

- key: stdout
  ref:
  - stderr
  - stdin
  en:
    term: standard output
    def: >
      A predefined communication channel typically used to send output
      to the screen or to the next process in a
      [pipe](#pipe_shell).

- key: stream
  en:
    term: stream
    def: >
      A sequence of bytes or other data of variable length that can only
      be processed in sequential order.

- key: streaming_api
  en:
    term: streaming API
    def: >
      An [API](#api) that processes data in chunks rather than needing to have
      all of it in memory at once. Streaming APIs usually require
      handlers for events such as "start of data", "next block", and
      "end of data".

- key: string
  en:
    term: string
    def: >
      A block of text in a program. The term is short for "character string".

- key: successive_refinement
  en:
    term: successive refinement
    def: >
      See [top-down design](#top_down_design).

- key: synthetic_data
  en:
    term: synthetic data
    def: >
      Made-up data that has the same significant characteristics as real data,
      typically created for testing.

# T

- key: table
  en:
    term: table
    def: >
      A set of [records](#record) in a [relational
      database](#relational_database) or [dataframe](#dataframe).

- key: tag
  ref:
    - tag_closing
    - tag_opening
    - tag_self_closing
  en:
    term: "tag (in HTML)"
    def: >
      The textual marker showing the start and/or end of an [element](#element)
      in an HTML document.

- key: tag_closing
  en:
    term: closing tag
    def: >
      The textual marker showing the end of an [element](#element) in an
      HTML document, written `</tag>`.

- key: tag_opening
  en:
    term: opening tag
    def: >
      The textual marker showing the start of an [element](#element) in an
      HTML document, written `&lt;tag&gt;`.
      An opening tag may contain [attributes](#attribute).

- key: tag_self_closing
  en:
    term: self-closing tag
    def: >
      A textual marker representing an [element](#element) in an
      HTML document that has no content, written `&lt;tag/&gt;`.
      A self-closing tag may contain [attributes](#attribute).

- key: tcp
  en:
    term: Transmission Control Protocol
    acronym: TCP/IP
    def: >
      The most popular member of the [IP](#internet_protocol) family of protocols.
      TCP/IP tries to deliver messages reliably and in order
      so that programs can communicate as if they were reading and writing files.

- key: technical_debt
  en:
    term: technical debt
    def: >
      The work that will be required in the future
      because of limited quick-fix solutions or unaddressed complexity today.

- key: template_method_pattern
  en:
    term: Template Method pattern
    def: >
      A [design pattern](#design_pattern) in which a [parent
      class](#parent_class) defines an overall sequence of operations by calling
      [abstract methods](#abstract_method) that [child classes](#child_class)
      must then implement. Each child class then behaves in the same general way,
      but implements the steps differently.

- key: tdd
  en:
    term: test-driven development
    def: >
      The practice of writing tests before writing the code to be tested.
      Research shows that the order doesn't actually make a difference;
      what does is alternating in short bursts between testing and coding.

- key: test_fidelity
  en:
    term: test fidelity
    def: >
      The degree to which a [mock object](#mock_object) or other replacement
      for part or all of a system
      mimics the behavior of that system for testing purposes.

- key: text_mode
  en:
    term: text mode
    def: >
      An option for reading or writing files in which
      bytes are translated to or from characters
      and end-of-line markers are normalized.
      The term is used in contrast with [binary mode](#binary_mode).

- key: throw_exception
  en:
    term: throw exception
    def: >
      Another term for [raising](#raise_exception) an exception.

- key: throw_low_catch_high
  en:
    term: "throw low, catch high"
    def: >
      A widely-used pattern for managing [exceptions](#exception) whereby
      they are [raised](#raise_exception) in many places at low levels of
      a program but [caught](#catch_exception) in a few high-level places
      where corrective action can be taken.

- key: time_complexity
  ref:
  - space_complexity
  en:
    term: time complexity
    def: >
      The way the running time of an algorithm grows as a function of the problem size,
      usually expressed using [big-oh notation](#big_oh).

- key: timestamp
  en:
    term: timestamp
    def: >
      A digital identifier showing the time at which something was created or
      accessed. Timestamps should use [ISO date format](#iso_date_format) for
      portability.

- key: toctou
  en:
    term: "time of check - time of use"
    def: >
      A [race condition](#race_condition) in which a process checks the state of
      something and then operates on it, but some other process might alter that
      state between the check and the operation.

- key: token
  en:
    term: token
    def: >
      An indivisible unit of text for a parser, such as a variable name or a
      number. Exactly what constitutes a token depends on the language.

- key: tokenizer
  en:
    term: tokenizer
    def: >
      A piece of software that groups individual characters together
      into meaningful [tokens](#token).

- key: top_down_design
  ref:
  - successive_refinement
  en:
    term: top-down design
    def: >
      In software design, the practice of writing the more abstract or
      higher-level parts of the program first, then filling in the details
      layer by layer. In practice, programmers almost always modify the
      upper levels as they work on the lower levels, but high-level changes
      become less common as more of the details are filled in.

- key: topological_order
  en:
    term: topological order
    def: >
      Any ordering of the [nodes](#node) in a [graph](#graph_data) that respects the
      direction of its [edges](#edge), i.e., if there is an edge from node A to
      node B, A comes before B in the ordering. There may be many topological
      orderings of a particular graph.

- key: tree
  en:
    term: tree
    def: >
      A [graph](#graph_data) in which every node except the [root](#root_tree) has
      exactly one [parent](#parent_tree).

- key: truthy
  ref:
  - falsy
  en:
    term: truthy
    def: >
      Refers to a value that is treated as true in Boolean expressions.
      In Python, this includes non-empty strings and lists
      and numbers other than zero.

- key: tuple
  en:
    term: tuple
    def: >
      A value that has a fixed number of parts, such as the three color
      components of a red-green-blue color specification.

- key: two_hard_problems
  en:
    term: two hard problems in computer science
    def: >
      Refers to a quote by Phil Karlton: "There are only two hard problems in
      computer science—cache invalidation and naming things." Many variations
      add a third problem as a joke, such as [off-by-one errors](#off_by_one_error).

- key: twos_complement
  ref:
  - sign_magnitude
  en:
    term: two's complement
    def: >
      A binary representation of integers that "rolls over" like an odometer
      to represent negative values.

- key: type_hint
  en:
    term: type hint
    def: >
      Extra information added to a program to indicate what data type or types
      a variable is supposed to have. Type hints are a compromise between
      [static typing](#static_typing) and [dynamic typing](#dynamic_typing).

# U

- key: unicode
  en:
    term: Unicode
    def: >
      A standard that defines numeric codes for many thousands of characters and
      symbols. Unicode does not define how those numbers are stored; that is
      done by standards like [UTF-8](#utf_8).

- key: unit_test
  en:
    term: unit test
    def: >
      A test that exercises one function or feature of a piece of software and
      produces [pass](#pass_test), [fail](#fail_test), or [error](#error_test).

- key: unparsing
  en:
    term: unparsing
    def: >
      The act of turning the data structure generated by a [parser](#parser)
      back into program text.

- key: upcall
  en:
    term: upcall
    def: >
      The act of explicitly invoking a method of a [parent class](#parent_class)
      from inside a [child class](#child_class).
      A method in a child class may upcall to the corresponding method in the parent class
      as part of extending that method.

- key: url
  en:
    term: Universal Resource Locator
    acronym: URL
    def: >
      A multi-part identifier that specifies something on a computer network.
      A URL may contain a protocol (such as `http`),
      a [hostname](#hostname) such as `example.com`,
      a [port](#port) (such as 80),
      a path (such as `/homepage.html`),
      and various other things.

- key: utc
  en:
    term: Coordinated Universal Time
    acronym: UTC
    def: >
      The standard time against which all others are defined. UTC is the time at
      longitude 0° and is not adjusted for daylight savings.
      [Timestamps](#timestamp) are often reported in UTC so that they will be
      the same no matter what timezone the computer is in.

- key: utf_32
  en:
    term: UTF-32
    def: >
      A way to store the numeric codes representing [Unicode](#unicode)
      characters in which every character is stored as a 32-bit integer.

- key: utf_8
  en:
    term: UTF-8
    def: >
      A way to store the numeric codes representing [Unicode](#unicode)
      characters that is [backward-compatible](#backward_compatible)
      with the older [ASCII](#ascii) standard.

# V

- key: varargs
  en:
    term: varargs
    def: >
      Short for "variable arguments",
      a mechanism that captures any "extra" arguments to a function or method.

- key: variable_capture
  en:
    term: variable capture
    def: >
      The process by which a [closure](#closure) "remembers"
      the variables that were in scope when it was created.

- key: variable_length_encoding
  en:
    term: variable-length encoding
    def: >
      Any technique for representing data in which a single logical unit of data
      may be represented by a variable number of bits or bytes.

- key: vector
  en:
    term: vector
    def: >
      A sequence of values, usually of [homogeneous](#homogeneous) type.

- key: version_control_system
  en:
    term: version control system
    def: >
      A system for managing changes made to software during its development.

- key: viewport
  en:
    term: viewport
    def: >
      A [class](#class) or other data structure whose purpose is
      to keep track of what can currently be seen by the user.

- key: virtual_machine
  en:
    term: virtual machine
    def: >
      A program that pretends to be a computer. This may seem a bit redundant,
      but VMs are quick to create and start up, and changes made inside the
      virtual machine are contained within that VM so we can install new
      [packages](#package) or run a completely different operating system
      without affecting the underlying computer.

- key: visitor_pattern
  ref:
  - iterator_pattern
  en:
    term: Visitor pattern
    def: >
      A [design pattern](#design_pattern) in which the operation to be done is
      taken to each element of a data structure in turn. It is usually
      implemented by having a generator "visitor" that knows how to reach the
      structure's elements, which is given a function or method to call for each
      in turn, and that carries out the specific operation.

# W

- key: watchpoint
  en:
    term: watchpoint
    def: >
      A location or variable being monitored by a debugger.
      If the value at that location or in that variable changes,
      the debugger halts and gives the user a chance to inspect the program.

- key: word_memory
  en:
    term: word (of memory)
    def: >
      The unit of memory that a particular processor most naturally works with.
      While a byte is a fixed size (8 bits), a word may be 16, 32, or 64 bits
      long depending on the processor.

# X

- key: xml
  en:
    term: XML
    full: Extensible Markup Language
    def: >
      A set of rules for defining [HTML](#html)-like tags and using them to
      format documents (typically data). XML was popular in the early 2000s, but
      its complexity led many programmers to adopt [JSON](#json), instead.

# Y

- key: yaml
  en:
    term: YAML
    full: "YAML Ain't Markup Language"
    def: >
      A way to represent nested data
      using indentation rather than the parentheses and commas of [JSON](#json).
      YAML is often used in configuration files and to define
      [parameters](#parameter) for various flavors of [Markdown](#markdown)
      documents.

# Z

- key: z_buffering
  en:
    term: z-buffering
    def: >
      A drawing method that keeps track of the depth of what lies "under" each
      pixel so that it displays whatever is nearest to the observer.
